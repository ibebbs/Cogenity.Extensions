trigger:
- master
- develop

pool:
  vmImage: 'ubuntu-16.04'

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
 - pwsh: |
    If ("$(Build.SourceBranch)" -eq "refs/heads/master") {
      Write-Host "##vso[task.setvariable variable=buildConfiguration;]Release"
    }
    If ("$(Build.SourceBranch)" -eq "refs/heads/develop") {
      Write-Host "##vso[task.setvariable variable=buildConfiguration;]Debug"
    }
 - script: | 
    echo building configuration $(buildConfiguration)

- task: GitVersion@5
  displayName: 'GitVersion'
  inputs:
    updateAssemblyInfo: true
    writeVersionInfoToBuildLog: true

- script: echo %Action%%BuildVersion%
  displayName: 'Set build version'
  env:
    Action: '##vso[build.updatebuildnumber]'
    BuildVersion: $(GitVersion.SemVer)

- script: dotnet restore src/Cogenity.Extensions.Hosting.Composition.Abstractions/Cogenity.Extensions.Hosting.Composition.Abstractions.csproj
  displayName: 'Restore Cogenity.Extensions.Hosting.Composition.Abstractions.csproj'
- script: dotnet build src/Cogenity.Extensions.Hosting.Composition.Abstractions/Cogenity.Extensions.Hosting.Composition.Abstractions.csproj --configuration $(buildConfiguration) /p:Version='$(GitVersion.SemVer)'
  displayName: 'Build Cogenity.Extensions.Hosting.Composition.Abstractions.csproj'
- script: dotnet pack src/Cogenity.Extensions.Hosting.Composition.Abstractions/Cogenity.Extensions.Hosting.Composition.Abstractions.csproj --configuration $(buildConfiguration) -o '$(Build.ArtifactStagingDirectory)' /p:Version='$(GitVersion.NuGetVersionV2)'
  displayName: 'Pack Cogenity.Extensions.Hosting.Composition.Abstractions.csproj'

- script: dotnet restore src/Cogenity.Extensions.Hosting.Composition/Cogenity.Extensions.Hosting.Composition.csproj
  displayName: 'Restore Cogenity.Extensions.Hosting.Composition.csproj'
- script: dotnet build src/Cogenity.Extensions.Hosting.Composition/Cogenity.Extensions.Hosting.Composition.csproj --configuration $(buildConfiguration) /p:Version='$(GitVersion.SemVer)'
  displayName: 'Build Cogenity.Extensions.Hosting.Composition.csproj'
- script: dotnet pack src/Cogenity.Extensions.Hosting.Composition/Cogenity.Extensions.Hosting.Composition.csproj --configuration $(buildConfiguration) -o '$(Build.ArtifactStagingDirectory)' /p:Version='$(GitVersion.NuGetVersionV2)'
  displayName: 'Pack Cogenity.Extensions.Hosting.Composition.csproj'
  
- script: dotnet restore src/Cogenity.Extensions.Logging.EventSource/Cogenity.Extensions.Logging.EventSource.csproj
  displayName: 'Restore Cogenity.Extensions.Logging.EventSource.csproj'
- script: dotnet build src/Cogenity.Extensions.Logging.EventSource/Cogenity.Extensions.Logging.EventSource.csproj --configuration $(buildConfiguration) /p:Version='$(GitVersion.SemVer)'
  displayName: 'Build Cogenity.Extensions.Logging.EventSource.csproj'
- script: dotnet pack src/Cogenity.Extensions.Logging.EventSource/Cogenity.Extensions.Logging.EventSource.csproj --configuration $(buildConfiguration) --include-symbols --include-source -o '$(Build.ArtifactStagingDirectory)' /p:Version='$(GitVersion.NuGetVersionV2)'
  displayName: 'Pack Cogenity.Extensions.Logging.EventSource.csproj for Debug'
  condition: eq(variables['buildConfiguration'], 'Debug')
- script: dotnet pack src/Cogenity.Extensions.Logging.EventSource/Cogenity.Extensions.Logging.EventSource.csproj --configuration $(buildConfiguration) -o '$(Build.ArtifactStagingDirectory)' /p:Version='$(GitVersion.NuGetVersionV2)'
  displayName: 'Pack Cogenity.Extensions.Logging.EventSource.csproj for Release'
  condition: eq(variables['buildConfiguration'], 'Release')

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)
    artifactName: MyBuildOutputs

- task: NuGetCommand@2
  inputs:
    command: push
    nuGetFeedType: internal
    publishVstsFeed: NstrumentPackages
    verbosityPush: detailed
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))

